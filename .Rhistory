#Imputing the values in the main object data-set as per the decoding_factors
object=impute_factor_code(decoding_factors, object)
#converting factor vars back to factor type
for(i in 1:nfactor)
{
object[,i]=as.factor(object[,i])
}
summary(object)
#if number of levels = 1, then we'll not include the variable for modeling
object=exclude_single_level_factorvars(object, nfactor)
summary(object)
#Once we are done with reducing the levels of factor vars we should be able to create a decision tree
library(rpart)
mod<-rpart(Fatal~.,data=object[,-2],method="class")
summary(mod)
library(rattle)
fancyRpartPlot(mod)
mod
#so the tree shows activity levels 0,1 and area levels: 0,1 are safe from "fatal" accidents
ls=exclude_single_level_factorvars(object, nfactor)
#use debug function to debug a function. Following code:
#debug(<function_name>)
#function_name(arguments)#call the function
# to stop the debug click stop on console
#Function to delete cols with > cutoff_na missing values, as written in quality dataframe
delete=function(object, quality, cutoff_na=.25)
{
#getting the variable names with number of missing values more than cut-off
a=quality$VariableName[quality$MissingPtage>cutoff_na]
a=as.character(a)
a
col=1:length(a)
i=1
for (i in 1:length(a))
{
col[i]=grep(a[i], names(object))
}
col
#deleting the above columns from main db and quality db
object=object[,-col]
return(object)
}
#function to reorder object - targetvar +  factor + quantitative variables
reorder_factor_quant=function(object)
{
factor=data.frame(1:nrow(object))
quant=data.frame(1:nrow(object))
char=data.frame(1:nrow(object))
i=1
l=1
m=1
n=1
while(i<ncol(object))
{
if(class(object[,i])=="factor")
{
cat(i, "factor")
factor=cbind(factor, object[,i])
names(factor)[l+1]=names(object)[i]
l=l+1
}
else if (class(object[,i])=="character")
{
cat(i,"character")
char=cbind(char, object[,i])
names(factor)[m+1]=names(object)[i]
m=m+1
}
else if ((class(object[,i]))=="integer" | class(object[,i])=="numeric")
{
cat(i, "quant")
quant=cbind(quant, object[,i])
names(quant)[n+1]=names(object)[i]
n=n+1
}
i=i+1
}
names(quant)
object_factor=data.frame(factor[,-1])
object_quant=data.frame(quant[,-1])
#object_char=char[,-1]
names(object_factor)=names(factor)[2:ncol(factor)]
names(object_quant)=names(quant)[2:ncol(quant)]
#Removing the event variable from our analysis
cn=grep("Fatal", names(object_factor))
Fatal=object_factor[,cn]
object_factor=object_factor[,-cn]
object_factor=cbind(Fatal, object_factor)
#Reordering object datasets acc to factor var and quantitative variables
object=cbind(object_factor,object_quant)
return(object)
}
#function to return col numbers of  factor vars with high number of levels > 30%
delete_factor_high_levels=function(object, nfactor)
{
df=data.frame()
i=2
while(i<=nfactor)
{
print(i)
if(length(unique(object[,i]))>.3*nrow(object))
{
df=rbind(df,i)
}
i=i+1
}
return(df)
}
factor_event_rate=function(object, object_factor)
{
table(object[,1])
Levels0FatalRate=data.frame()
dat2=data.frame()
for(i in 3:ncol(object_factor))#1st column is dependent variable Fatal
#we have to do analysis of independent variables (col no. 2 onwards)
{
print(i)
names(object)[i]
object[,i]=as.factor(object[,i])
object%>%count(Fatal,levels=object[,i])%>%filter(Fatal==1)->dat1
#dat1 will comprise of levels with Fatal=1
object%>%filter(object[,i]%in%dat1$levels)->datC2
#will comprise of rows in object db where object[,i] has same values as levels selected in dat1
dat1$N=unclass(unname(datC2%>%group_by(datC2[,i])%>%summarize(n())))[[2]]
dat1$Fatal_Rate=round(dat1$n/dat1$N,3)
dat1$Total_Levels=rep(length(dat1$levels), length(dat1$levels))
dat1$Fatal=NULL
dat1$Col_Num=i
dat1$Var_Name<-names(object)[i]
dat2=rbind(dat2,dat1)
rn=which(object[,i]%in%dat1$levels)#which row number have event rate = 1 ; the rest of the rows have levels with event rate=0
#For levels having 0 event rate, we will impute 0. In temp we will collate where-all we'll impute 0
#temp will be same format as decoding_factors
if(length(object[-rn,i])==0) #if there are no rows with 0 Fatal-rate then we skip the further code in for-loop
next
#if there are rows which have been skipped from above analysis of object[,i], these are the rows with Fatal-rate=0
#we will append these rows to Level0FatalRate and eventually impute these levels by level0
levels=unique(object[-rn,i])#to get the levels with 0 Fatal-rate
imputed_lvl=rep(0, length(levels))
datC1=data.frame(imputed_lvl=imputed_lvl, levels=levels)
datC1$Var_Name=dat1$Var_Name[1]
datC1$Col_Num=dat1$Col_Num[1]
Levels0FatalRate=rbind(Levels0FatalRate, datC1)#The levels with 0 Fatal rate are included in df Level0FatalRate
#We will eventually club the Levels0FatalRate DataFrame with dataframe level_decoding
#All the levels in Levels0FatalRate will be coded to Level 0 in object database
}
list=list(dat2, Levels0FatalRate)
return(list)
}
impute_factor_missing=function(object, object_factor, event_rate)
{
factors_all_lvls=data.frame()
l=3
i=1
while(i<=nrow(event_rate))
{
print(i)
dat1=event_rate[event_rate$Col_Num==l,]
if(is.na(dat1$levels[nrow(dat1)]))
{
dat1$Total_Levels=dat1$Total_Levels-1
diff=1:(nrow(dat1)-1)
for(j in 1:(nrow(dat1)-1))
{
diff[j]=dat1$Fatal_Rate[nrow(dat1)]-dat1$Fatal_Rate[j]
}
a=(min(Mod(diff)))
b=sum(diff%in%a)#if a exists in diff then b=1 and if -a exsits in diff then b=0
row_n=ifelse((b!=0), which(diff%in%a), which(diff%in%(-1*a)))
p=dat1[row_n,"levels"]#so we will impute the value mentioned in the col level of dat1 dataframe
object[is.na(object[,l]),l]=p
dat1=dat1[-nrow(dat1),] #we need not include the NA values for our Fatal analysis
i=i+1 #since we have reduced 1 row (NA) row
}
factors_all_lvls=rbind(factors_all_lvls, dat1)
if(!is.na(dat1$Total_Levels[i]))
i=i+dat1$Total_Levels[i]#since the na level has reduced
else break
l=event_rate$Col_Num[i]
}
list=list(object, factors_all_lvls)
return(list)
}
# condensing the levels for each factor col - to max 3
condense_3levels=function(object, event_rate, l=3)
{
decoding_factors=data.frame()
factors_3lvls=data.frame()
l=3#start processing from col. no. 3
i=1
while(i<=nrow(event_rate))
{
print(i)
dat1=event_rate[event_rate$Col_Num==l,]
lev=dat1$Total_Levels[i]
if(dat1$Total_Levels[1]>3)
{
dat1%>%mutate(levels=ntile(Fatal_Rate,3))%>%group_by(levels)%>%summarize(n=sum(n), N=sum(N))->dat2
dat2$Fatal_Rate=dat2$n/dat2$N
dat2$Total_Levels=3
dat2$Col_Num=l
dat2$Var_Name<-names(object)[l]
dat1%>%mutate(imputed_lvl=ntile(Fatal_Rate,3))%>%count(imputed_lvl, levels)->dat4
#dat4 will provide which all levels we are imputing by levels 1,2 and 3
dat4$Var_Name=names(object)[l]
dat4$Col_Num=l
dat1=dat2
decoding_factors=rbind(decoding_factors, dat4)
#will comprise of the decoding of the factor vars with > 3 levels to upto 3 levels
}
factors_3lvls=rbind(factors_3lvls, dat1)#factors_3lvls dataset after clubbing the levels to 3
print(i)
if(!is.na(i+lev))
i=i+lev#since the na level has reduced
else break
l=event_rate$Col_Num[i]
}
list=list(decoding_factors, factors_3lvls)
return(list)
}
clubbing_factors_beyond_3lvls=function(factors_3lvls, decoding_factors)
{
factors_final_clubbed=data.frame()
c=1
i=1
factors_3lvls=factors_3lvls[order(factors_3lvls$Col_Num),]
for(i in 1:nrow(factors_3lvls))
{
if(factors_3lvls$Col_Num[i]==c) {next}
c=factors_3lvls$Col_Num[i]
dat1=factors_3lvls[factors_3lvls$Col_Num==c,]
num_rows=nrow(dat1)
if(num_rows==3)
{
x=dat1$Fatal_Rate[1]-dat1$Fatal_Rate[2]
y=dat1$Fatal_Rate[2]-dat1$Fatal_Rate[3]
z=dat1$Fatal_Rate[1]-dat1$Fatal_Rate[3]
if((x)^2<.0004 & y^2<.0004)
{
dat1$n[1]=dat1$n[2]+dat1$n[3]+dat1$n[1]
dat1$N[1]=dat1$N[2]+dat1$N[3]+dat1$N[1]
del=c(2,3)#row number to be deleted
dat1=dat1[-del,]
dat1$Total_Levels=1
decoding_factors$imputed_lvl[decoding_factors$Col_Num==c & decoding_factors$imputed_lvl==2]=dat1$levels[1]
decoding_factors$imputed_lvl[decoding_factors$Col_Num==c & decoding_factors$imputed_lvl==3]=dat1$levels[1]
#if there is no-existing entry in the combined-factor db, then we can make a new entry
#as this dataset will be useful for substitution in the main 'object' dataset
#if level reduction is happening for the first time, then we need make fresh entry in decoding_factors
if(sum(decoding_factors$Col_Num %in% c)==0)
{
dat=data.frame(imputed_lvl=dat1$levels[1], levels=levels(object[,c])[c(2,3)], n=1, Col_Num=c)
decoding_factors=rbind(decoding_factors, dat)
}
}
else if(x^2<.0004)
{
dat1$n[1]=dat1$n[1]+dat1$n[2]
dat1$N[1]=dat1$N[1]+dat1$N[2]
del=2#row number to be deleted
dat1=dat1[-del,]
dat1$Total_Levels=2
decoding_factors$imputed_lvl[decoding_factors$Col_Num==c & decoding_factors$imputed_lvl==2]=dat1$levels[1]
if(sum(decoding_factors$Col_Num %in% c)==0)
{
dat=data.frame(imputed_lvl=dat1$levels[1], levels=levels(object[,c])[2], n=1, Col_Num=c)
decoding_factors=rbind(decoding_factors, dat)
}
}
else if(y^2<.0004)
{
dat1$n[2]=dat1$n[2]+dat1$n[3]
dat1$N[2]=dat1$N[2]+dat1$N[3]
del=3#row number to be deleted
dat1=dat1[-del,]
dat1$Total_Levels=2
decoding_factors$imputed_lvl[decoding_factors$Col_Num==c & decoding_factors$imputed_lvl==3]=dat1$levels[2]
if(sum(decoding_factors$Col_Num %in% c)==0)
{
dat=data.frame(imputed_lvl=dat1$levels[2], levels=levels(object[,c])[3], n=1, Col_Num=c)
decoding_factors=rbind(decoding_factors, dat)
}
}
}
if((num_rows==2))
{
x=dat1$Fatal_Rate[1]-dat1$Fatal_Rate[2]
if(x^2<.0004)
{
dat1$n[1]=dat1$n[1]+dat1$n[2]
dat1$N[1]=dat1$N[1]+dat1$N[2]
del=2#row number to be deleted
dat1=dat1[-del,]
dat1$Total_Levels=1
decoding_factors$imputed_lvl[decoding_factors$Col_Num==c & decoding_factors$imputed_lvl==2]=dat1$levels[1]
if(sum(decoding_factors$Col_Num %in% c)==0)
{
dat=data.frame(imputed_lvl=dat1$levels[1], levels=levels(object[,c])[2], n=1, Var_Name = dat1$Var_Name, Col_Num=c)
decoding_factors=rbind(decoding_factors, dat)
}
}
}
dat1$Fatal_Rate=dat1$n/dat1$N
factors_final_clubbed=rbind(factors_final_clubbed,dat1)
}
list=list(factors_final_clubbed, decoding_factors)
return(list)
}
impute_factor_code=function(decoding_factors, object)
{
for(i in 1:nrow(decoding_factors))
{
rn=which(object[, decoding_factors$Col_Num[i]] %in% decoding_factors$levels[i])
object[,decoding_factors$Col_Num[i]]=as.character(object[,decoding_factors$Col_Num[i]])
object[rn,decoding_factors$Col_Num[i]]=decoding_factors$imputed_lvl[i]
}
return (object)
}
#if number of levels = 1, then we'll not include the variable for modeling
exclude_single_level_factorvars=function(object, nfactor)
{
dat=data.frame()
for(i in 1:nfactor)
{
if(length((levels(object[,i])))==1)
{
dat=rbind(dat,i)
}
}
if(nrow(dat)!=0)
{
names(dat)="col_num"
object=object[,-dat$col_num]
nfactor=nfactor-dat$col_num
}
list=list(object,nfactor)
return(list)
}
#Main Code
library(dplyr)
library(ggplot2)
library(data.table)
setwd("C:\\Users\\Vaibhav\\Desktop\\BA\\jigsaw_acad\\R_Sessions\\Case_Studies\\global-shark-attacks")
oj=read.csv("attacks.csv", na.strings = c("","NA","UNKNOWN", "#VALUE!"))
?read.csv
str(oj)
summary(oj)
object=oj
#Target variable: Fatal
a=grep("Fatal..Y.N.", names(object))
names(object)[a]="Fatal"
table(object$Fatal)#shows "N " as a sep factor
summary(object$Fatal)#shows" N" as a sep factor
object$Fatal[object$Fatal=="y"]="Y"
object$Fatal[object$Fatal=="n"]="N"
object$Fatal[object$Fatal=="F"]="N"
object$Fatal[object$Fatal==" N"]="N"
object$Fatal[object$Fatal=="N "]="N"
#Delete the rows with NA in the target variable
object=object[-which(is.na(object$Fatal)),]
#Converting target var to 1 or 0
object$Fatal=ifelse(object$Fatal=="Y",1, 0)#converting "Y" and "N" into 1 and 0 respectively
object$Year[object$Year<1942]
object$Year[object$Year<1000]=NA #all values <1000 are less likely
object$Fatal=as.factor(as.character(object$Fatal))
table(object$Sex)#shows "M " as a sep factor
object$Sex[object$Sex=="M "]="M"
object$Sex[object$Sex=="N"]=NA
object$Sex[object$Sex=="."]=NA
object$Sex[object$Sex=="lli"]=NA
object$Sex=as.factor(as.character(object$Sex))#to reduce the number of factors
summary(object)
#quality=quality_report(object)#calling the function quality
#Preparing the quality report
quality=data.frame(names(object))
names(quality)="VariableName"
quality$datatype=class(object[,names(object)])
len=length(names(object))
i=1
for(i in 1:len)
{
quality$datatype[i]=class(object[,i])
quality$NoOfRecords[i] = nrow(object)
quality$UniqueRecords[i]=length(unique(object[,i]))
quality$DataAvailable[i]= quality$NoOfRecords[i]-sum(is.na(object[,i]))
quality$AvailablePercent[i]=round(quality$DataAvailable[i]/quality$NoOfRecords[i],2)
quality$Missing[i]=sum(is.na(object[,i]))
quality$MissingPtage[i] = round(quality$Missing[i]/quality$NoOfRecords[i],2)
quality$Minimum[i]=ifelse(quality$datatype[i]=="factor","Factor",min(object[,i],na.rm=T))
quality$Maximum[i]=ifelse(quality$datatype[i]=="factor","Factor",max(object[,i],na.rm=T))
quality$Mean[i]=ifelse(quality$datatype[i]=="factor","Factor", mean(object[,i],na.rm=T))
quality$five_ptile[i] = ifelse(quality$datatype[i]=="factor","Factor", quantile(object[,i],5/100, na.rm = T))
quality$ten_ptile[i] = ifelse(quality$datatype[i]=="factor","Factor", quantile(object[,i],10/100, na.rm = T))
quality$twentyfive_ptile[i] = ifelse(quality$datatype[i]=="factor","Factor", quantile(object[,i],25/100, na.rm = T))
quality$fifty_ptile[i] = ifelse(quality$datatype[i]=="factor","Factor", quantile(object[,i],50/100, na.rm = T))
quality$seventyfive_ptile[i] = ifelse(quality$datatype[i]=="factor","Factor", quantile(object[,i],75/100, na.rm = T))
quality$ninety_ptile[i] = ifelse(quality$datatype[i]=="factor","Factor", quantile(object[,i],90/100, na.rm = T))
quality$ninetyfive_ptile[i] = ifelse(quality$datatype[i]=="factor","Factor", quantile(object[,i],95/100, na.rm = T))
}
#delete the cols with NA values > .26
cutoff=.26
object=delete(object, quality,cutoff)
colSums(is.na(object))
summary(object)
names(object)
# reorder object - targetvar +  factor + quantitative variables
object=reorder_factor_quant(object)
head(object)
summary(object)
#so 1st var is dependent var, 2nd var to last-1 var are factor vars and last is quant var
#if the number of unique levels is > 50% of no. of rows, then they are not factor type vars
#deleting the vars with levels >30% of nrows
nfactor=ncol(object)-1
delete_colnum=delete_factor_high_levels(object,nfactor)
names(object)[delete_colnum$X2]
#We will retain the colno. Case.Number - as it might be the primary key
npkeys=1#number of cols for primary key
object=object[,-delete_colnum$X2[2:nrow(delete_colnum)]]
names(object)
#update var nfactor also accordingly
nfactor=nfactor-length(delete_colnum$X2)+npkeys
object_factor=object[1:(ncol(object)-1)]#specific to this case study
object_quant=object[ncol(object)]#specific to this case study
ls=factor_event_rate(object, object_factor)
event_rate=ls[[1]]
Levels0FatalRate=ls[[2]]
#impute NA values in factor cols
list=impute_factor_missing(object, object_factor,event_rate)
object=list[[1]]
event_rate=list[[2]] #note this dataframe does not comprise NA rows
#but it also does not update the numbers with NA values (n and N values)
#it can be done if reqd
colSums(is.na(object))#note: all factor vars have 0 missing values
# condensing the levels for each factor col - to max 3
ls=condense_3levels(object, event_rate, 3)#we have to condense levels for columns - col number 3 onwards
decoding_factors=ls[[1]]
factors_3lvls=ls[[2]]
decoding_factors$n=NULL
#decoding_factors=rbind(decoding_factors, Levels0FatalRate)
#we will combine these 2 dataframes, and make imputations in the main database based on these
#but later - after condensing levels further
#condensing the levels even further if event rate is similar
ls=clubbing_factors_beyond_3lvls(factors_3lvls, decoding_factors)
factors_final_clubbed=ls[[1]]
decoding_factors=ls[[2]]
decoding_factors=rbind(decoding_factors, Levels0FatalRate)
#So, dataframe: decoding_factors contains the decoding of all the clubbed levels to original levels
#Imputing the values in the main object data-set as per the decoding_factors
object=impute_factor_code(decoding_factors, object)
#converting factor vars back to factor type
for(i in 1:nfactor)
{
object[,i]=as.factor(object[,i])
}
summary(object)
ls=exclude_single_level_factorvars(object, nfactor)
object=ls[[1]]
nfactor=ls[[2]]
nfactor
object
summary(object)
library(rpart)
mod<-rpart(Fatal~.,data=object[,-2],method="class")
summary(mod)
library(rattle)
fancyRpartPlot(mod)
mod
#so the tree shows activity levels 0,1 and area levels: 0,1 are safe from "fatal" accidents
#decile-wise (/n-quantile-wise) binning of quantitative variables, and finding the corresponding event rate:
Quant_DA=data.frame()
x=nfactor+1
for(i in x:ncol(object))#for each quantitative col
{
p=as.name(names(object)[i])#this will remove the "" from the char var
for(j in 10:1)#divide into j levels;
# first we'll try dividing into decile, if max in the 1st decile is 0, then divide into 9 levels, compare and continue
{
max=unclass(object%>%mutate(Lvl = ntile(object[,i],n=j))%>%group_by(Lvl)%>%summarize(round(max(p),2))%>%unname())[[2]]
if(max[1]!=0)#if the max value is 0, then we will try making j-1 quantiles for this variable
{
break
}
}
dat1=data.frame(1:(j+1), 0) #for levels + 1 NA level
names(dat1)=c("Lvl", "Num_High_Fatals")
dat1[(j+1),1]=NA #11th row represents the number of NA values
dat1$Num_High_Fatals=rep(0,(j+1))
object%>%mutate(Lvl = ntile(object[,i],n=j))->object
object%>%group_by(Lvl)%>%count(Fatal,Lvl)%>%filter(Fatal==1)->dat2
dat1$Num_High_Fatals=rep(0,(j+1))
dat1$Num_High_Fatals[which(dat1$Lvl %in% dat2$Lvl)]=dat2$n
dat1$FatalVariable = names(object)[i]
Total = unclass(object%>%group_by(Lvl)%>%summarize(n())%>%unname())[[2]]
if(length(Total)!=j+1) Total[j+1]=NA
dat1$Total = Total
dat1$Fatal_Rate=round(dat1$Num_High_Fatals/dat1$Total,2)
dat1$Col_Num=i
dat1$DataType=class(object[,i])
max[j+1]=NA
dat1$Max_Lvl=max
min=unclass(object%>%group_by(Lvl)%>%summarize(round(min(p),2))%>%unname())[[2]]
min[j+1]=NA
dat1$Min_Lvl=min
mean=unclass(object%>%group_by(Lvl)%>%summarize(round(mean(p),2))%>%unname())[[2]]
mean[j+1]=NA
dat1$Mean_Lvl=mean
dat1$levels = j+1
Quant_DA=rbind(Quant_DA,dat1)
print(i)
object$Lvl=NULL
}
View(Quant_DA)
